(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{250:function(t,v,a){"use strict";a.r(v);var i=a(28),e=Object(i.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-flow-说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-flow-说明"}},[t._v("#")]),t._v(" git flow 说明")]),t._v(" "),a("h2",{attrs:{id:"提交代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交代码"}},[t._v("#")]),t._v(" 提交代码")]),t._v(" "),a("ul",[a("li",[t._v("长期存在两个分支：master 和 develop")]),t._v(" "),a("li",[t._v("master 分支代表的是线上代码，禁止直接在 master 上进行commit")]),t._v(" "),a("li",[t._v("develop 代表开发环境的代码，禁止直接在 develop 上直接进行commit")]),t._v(" "),a("li",[t._v("分支/tag 禁止用中文或其他特殊字符，只用英文、数字、连接符。")])]),t._v(" "),a("h2",{attrs:{id:"分支命名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支命名"}},[t._v("#")]),t._v(" 分支命名")]),t._v(" "),a("ul",[a("li",[t._v("创建分支的时间+项目描述: 2019-06-01-1500/fix-download-url")]),t._v(" "),a("li",[t._v("项目描述一定要清晰，至少结合两人的意见，禁止 fix/update/bugfix 之类的不清晰到描述")])]),t._v(" "),a("h2",{attrs:{id:"tag-命名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tag-命名"}},[t._v("#")]),t._v(" tag 命名")]),t._v(" "),a("ul",[a("li",[t._v("打 tag 的时间 + 创建分支的时间 + 项目描述: 2019-06-03-1120/2019-06-01-1500/fix-download-url")])]),t._v(" "),a("h2",{attrs:{id:"git-messsage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-messsage"}},[t._v("#")]),t._v(" git messsage")]),t._v(" "),a("ul",[a("li",[t._v("新增：...文件/...功能")]),t._v(" "),a("li",[t._v("修复：...功能/...bug")]),t._v(" "),a("li",[t._v("优化：...功能/...样式/...体验")]),t._v(" "),a("li",[t._v("删除：...文件/...功能")]),t._v(" "),a("li",[t._v("更新：...文件/...功能")]),t._v(" "),a("li",[t._v("测试（不建议）：增加用于测试的代码")])]),t._v(" "),a("h2",{attrs:{id:"git-flow-流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-flow-流程"}},[t._v("#")]),t._v(" git-flow 流程")]),t._v(" "),a("h3",{attrs:{id:"开发一个新的需求-例如新增页面、功能更新、ui更改等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开发一个新的需求-例如新增页面、功能更新、ui更改等"}},[t._v("#")]),t._v(" 开发一个新的需求(例如新增页面、功能更新、UI更改等)")]),t._v(" "),a("ul",[a("li",[t._v("在develop 分支执行 "),a("code",[t._v("git flow feature start 2019-05-30-1500/mayday")])]),t._v(" "),a("li",[t._v("此时会在本地开出一个 feature/2019-5-15-mayday 分支，我们可以把它 push 的远程git 仓库进行协作开发")]),t._v(" "),a("li",[t._v("在项目开发过程中，所有的更改和提交都位于该 feature/2019-5-15-mayday 分支之上")]),t._v(" "),a("li",[t._v("在开发完成之后，需要测试进入开始测试时")]),t._v(" "),a("li",[t._v("在 feature 分支执行 "),a("code",[t._v("git flow feature finish 2019-05-30-1500/mayday")]),t._v(" "),a("ul",[a("li",[t._v("该操作会将该分支合并到 develop，同时删除该 feature 分支")])])]),t._v(" "),a("li",[t._v("如果此时他人也合并过分支，那么需要自己手动解决冲突")])]),t._v(" "),a("h3",{attrs:{id:"需要测试该期需求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#需要测试该期需求"}},[t._v("#")]),t._v(" 需要测试该期需求")]),t._v(" "),a("ul",[a("li",[t._v("此时 git flow 需要使用一个 release 分支进行时测试")]),t._v(" "),a("li",[t._v("前提是 feature 分支已经完成，合并到了 develop")]),t._v(" "),a("li",[t._v("在 develop 分支执行 "),a("code",[t._v("git flow release start 2019-05-30-1500/mayday")]),t._v(" 创建一个 release")]),t._v(" "),a("li",[t._v("之后测试出的问题，都是在该 release 分支进行修改和提交")])]),t._v(" "),a("h3",{attrs:{id:"需要发布"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#需要发布"}},[t._v("#")]),t._v(" 需要发布")]),t._v(" "),a("ul",[a("li",[t._v("在测试完需求之后，需要上线")]),t._v(" "),a("li",[t._v("在 release 分支执行 "),a("code",[t._v("git flow release finish 2019-05-30-1500/mayday")]),t._v(" "),a("ul",[a("li",[t._v("该操作会把该 release 分支同时合并到 develop 和 master 分支上去，同时删除该分支")])])]),t._v(" "),a("li",[t._v("注意：如果使用命令行进行操作，此时会在 vim 里打开关于 "),a("code",[t._v("commit message")]),t._v(" 和 "),a("code",[t._v("tag message")]),t._v(" 的说明，此时使用 "),a("code",[t._v(":q")]),t._v(" 关闭即可")]),t._v(" "),a("li",[t._v("此时 master 和 develop 上都是最新的代码，需要手动 "),a("code",[t._v("git push 到远程仓库")])]),t._v(" "),a("li",[t._v("git flow 此时会默认生成一个 tag "),a("code",[t._v("2019-05-30-1500/mayday")]),t._v(" 注意我们不使用这个tag")]),t._v(" "),a("li",[t._v("而是手动打个一个tag 使用 "),a("code",[t._v("git tag 2019-06-03-1120/2019-05-30-1500/mayday")])]),t._v(" "),a("li",[t._v("手动把该 tag push 到远程 "),a("code",[t._v("git push origin 2019-06-03-1120/2019-05-30-1500/mayday")])]),t._v(" "),a("li",[t._v("把 master 分支上的代码测试后即可发布上线")])]),t._v(" "),a("h3",{attrs:{id:"需要修复问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#需要修复问题"}},[t._v("#")]),t._v(" 需要修复问题")]),t._v(" "),a("ul",[a("li",[t._v("在任何开发阶段，如果出现线上问题，那么就需要一个 hotfix 分支去修复")]),t._v(" "),a("li",[t._v("在 master 上执行 "),a("code",[t._v("git flow hotfix start 2019-05-30-1500/fix-download-url")]),t._v(" "),a("ul",[a("li",[t._v("该操作会创建一个 hotfix 分支，我们在 hotfix 上面进行代码的线上问题的修复和提交")])])]),t._v(" "),a("li",[t._v("完成修复和测试后，需要发布该代码")]),t._v(" "),a("li",[t._v("在 hotfix 分支执行 "),a("code",[t._v("git flow hotfix finish 2019-05-30-1500/fix-download-url")]),t._v(" "),a("ul",[a("li",[t._v("该操作会将该hotfix 分支的代码合并到master 和 develop 上去，同时删除该 hotfix 分支")])])]),t._v(" "),a("li",[t._v("git flow 此时会默认生成一个 tag "),a("code",[t._v("2019-05-30-1500/fix-download-url")]),t._v(" 注意我们不使用这个tag")]),t._v(" "),a("li",[t._v("而是手动打个一个tag 使用 "),a("code",[t._v("git tag 2019-06-03-1120/2019-05-30-1500/fix-download-url")])]),t._v(" "),a("li",[t._v("手动把该 tag push 到远程 "),a("code",[t._v("git push origin 2019-06-03-1120/2019-05-30-1500/fix-download-url")])]),t._v(" "),a("li",[t._v("把 master 分支上的代码测试后即可发布上线")])]),t._v(" "),a("h3",{attrs:{id:"注意"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),a("ul",[a("li",[t._v("windows 上的命令行工具在 "),a("code",[t._v("git flow init")]),t._v(" 时可能需要手动指定 prefix")])]),t._v(" "),a("h3",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("git-flow备忘"),a("OutboundLink")],1)])]),t._v(" "),a("h1",{attrs:{id:"git常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git常用命令"}},[t._v("#")]),t._v(" git常用命令")]),t._v(" "),a("h2",{attrs:{id:"基础命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础命令"}},[t._v("#")]),t._v(" 基础命令")]),t._v(" "),a("h3",{attrs:{id:"tag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tag"}},[t._v("#")]),t._v(" tag")]),t._v(" "),a("ul",[a("li",[t._v("增加一个标签 "),a("code",[t._v("git tag v1.0")])]),t._v(" "),a("li",[t._v("将标签推送到远程 "),a("code",[t._v("git push origin v1.0")])]),t._v(" "),a("li",[t._v("删除远程tag "),a("code",[t._v("git push --delete origin v2.8.3")])]),t._v(" "),a("li",[t._v("删除本地tag "),a("code",[t._v("git tag --d v2.8.3")])])]),t._v(" "),a("h3",{attrs:{id:"branch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#branch"}},[t._v("#")]),t._v(" branch")]),t._v(" "),a("ul",[a("li",[t._v("删除一个本地分支 "),a("code",[t._v("git branch -D feature/~")])]),t._v(" "),a("li",[t._v("将本地的分支和远程的对应 "),a("code",[t._v("git branch --set-upstream-to=origin/develop")])]),t._v(" "),a("li",[t._v("切换分支的时候，将当前分支修改的内容一起打包带走，同步到切换的分支下。 "),a("code",[t._v("git checkout --merge <branch>")])]),t._v(" "),a("li",[t._v("删除本地的remote 分支 "),a("code",[t._v("git branch -dr origin/hotfix/2019-05-31-fix")])]),t._v(" "),a("li",[t._v("删除远程分支 "),a("code",[t._v("git push origin --delete hotfix/2019-05-31-fix")])]),t._v(" "),a("li",[t._v("设置远程分支：查看项目创建时的 readme")]),t._v(" "),a("li",[t._v("基于远程仓库的分支创建新分支并且切换到新分支 "),a("code",[t._v("git checkout -b develop origin/develop")])])]),t._v(" "),a("h3",{attrs:{id:"stash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stash"}},[t._v("#")]),t._v(" stash")]),t._v(" "),a("ul",[a("li",[t._v("放弃尚未 add 的更改 "),a("code",[t._v("git checkout .")]),t._v(" （checkout：切换分支 | 移除尚未  add 的修改）")]),t._v(" "),a("li",[t._v("暂存当前修改 "),a("code",[t._v("git stash")])]),t._v(" "),a("li",[t._v("提取暂存到修改 "),a("code",[t._v("git stash pop")])])]),t._v(" "),a("h3",{attrs:{id:"git-问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-问题"}},[t._v("#")]),t._v(" Git 问题")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("[x] rm了文件，同时也想在 git 中不再追踪该文件")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git rm file1")])]),t._v(" "),a("li",[a("code",[t._v('git commit -am "abc"')])])])]),t._v(" "),a("li",[a("p",[t._v("[x] 忽略已追踪的文件")]),t._v(" "),a("ul",[a("li",[t._v("如果你已經對一個文件進行追蹤了很多个版本，此時在 ignore 里面忽略是没用的")]),t._v(" "),a("li",[t._v(".gitignore只能忽略那些原来没有被track的文件")]),t._v(" "),a("li",[t._v('正确的做法应该是：git rm --cached logs/xx.log，然后更新 .gitignore 忽略掉目标文件，最后 git commit -m "We really don\'t want Git to track this anymore!"')])])]),t._v(" "),a("li",[a("p",[t._v("[x] 本地对某些公共文件做了本地化的配置，希望可以 pull 和 Merge，但是不要提交修改")]),t._v(" "),a("ul",[a("li",[t._v("用 .gitignore 忽略掉这个本地的 config.json，然后在代码里 try load 这个配置，如果失败，就使用公共的配置")])])])]),t._v(" "),a("h3",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),a("ul",[a("li",[a("code",[t._v('git config --global user.name "Your Name”')])]),t._v(" "),a("li",[a("code",[t._v('git config --global user.email "email@example.com”')]),t._v(" //全局的名称和邮箱设置")]),t._v(" "),a("li",[a("code",[t._v("git diff test.md")]),t._v(" //查看两次文件之间的差异")]),t._v(" "),a("li",[t._v("在git 中使用"),a("code",[t._v("HEAD")]),t._v("来表示当前版本，上一个版本则是HEAD^,上上个HEAD^^,上100个HEAD~100")]),t._v(" "),a("li",[a("code",[t._v("git reset —-hard HEAD^")]),t._v(" //将版本回退到上一个版本，此时index指向该版本，该版本之后的版本不会再log里面显示，但是可以通过commit id进行恢复")]),t._v(" "),a("li",[a("code",[t._v("git reset —-hard 21e20ce")]),t._v(" //id没有必要写完全，但要避免重复")]),t._v(" "),a("li",[a("code",[t._v("git reflog")]),t._v(" //reflog纪录每一次的命令")])])])}),[],!1,null,null,null);v.default=e.exports}}]);